/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SplatImport } from './routes/$'
import { Route as PreviewPublicIdImport } from './routes/preview.$publicId'
import { Route as PreviewSplatImport } from './routes/preview.$'

// Create/Update Routes

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const PreviewPublicIdRoute = PreviewPublicIdImport.update({
  id: '/preview/$publicId',
  path: '/preview/$publicId',
  getParentRoute: () => rootRoute,
} as any)

const PreviewSplatRoute = PreviewSplatImport.update({
  id: '/preview/$',
  path: '/preview/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/preview/$': {
      id: '/preview/$'
      path: '/preview/$'
      fullPath: '/preview/$'
      preLoaderRoute: typeof PreviewSplatImport
      parentRoute: typeof rootRoute
    }
    '/preview/$publicId': {
      id: '/preview/$publicId'
      path: '/preview/$publicId'
      fullPath: '/preview/$publicId'
      preLoaderRoute: typeof PreviewPublicIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '/preview/$': typeof PreviewSplatRoute
  '/preview/$publicId': typeof PreviewPublicIdRoute
}

export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '/preview/$': typeof PreviewSplatRoute
  '/preview/$publicId': typeof PreviewPublicIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$': typeof SplatRoute
  '/preview/$': typeof PreviewSplatRoute
  '/preview/$publicId': typeof PreviewPublicIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$' | '/preview/$' | '/preview/$publicId'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '/preview/$' | '/preview/$publicId'
  id: '__root__' | '/$' | '/preview/$' | '/preview/$publicId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  PreviewSplatRoute: typeof PreviewSplatRoute
  PreviewPublicIdRoute: typeof PreviewPublicIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  PreviewSplatRoute: PreviewSplatRoute,
  PreviewPublicIdRoute: PreviewPublicIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$",
        "/preview/$",
        "/preview/$publicId"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/preview/$": {
      "filePath": "preview.$.tsx"
    },
    "/preview/$publicId": {
      "filePath": "preview.$publicId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
